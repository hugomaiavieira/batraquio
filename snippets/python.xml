<?xml version='1.0' encoding='utf-8'?>
<snippets language="python">
  <snippet>
    <text><![CDATA[$<
import re
global white_spaces
white_spaces = ''
regex=re.compile(r'(?P<white_spaces\>\s*)(def )?(?P<method\>[_ \w]+\w)[ ]?(\((?P<params\>.*)\))?:?')
regex=regex.match($GEDIT_CURRENT_LINE)
if regex:
    dictionary=regex.groupdict()
    method=dictionary['method'].replace(' ','_')
    white_spaces=dictionary['white_spaces']
    params= dictionary['params'] and 'self, ' + dictionary['params'] or 'self'
    result = white_spaces + 'def ' + method + '(' + params + '):'
else:
    result = $GEDIT_CURRENT_LINE
return result
>
	$<return white_spaces>]]></text>
    <accelerator><![CDATA[<Control>u]]></accelerator>
    <description>Smart def</description>
  </snippet>
  <snippet>
    <text><![CDATA[import unittest
from should_dsl import *

class ${1:ClassName}(unittest.TestCase):
	]]></text>
    <tag>ut</tag>
    <description>Unittest</description>
  </snippet>
  <snippet>
    <text><![CDATA[@${1:Given/When/Then}(r'${2:step definition with params (.*)}')
$<
import re
params_list = re.findall(r'["|\']?\(.*?\)["|\']?', ${2})
params_number = len(params_list)
params = ''
for number in range(params_number):
    params += 'var' + str(number+1)
    if number+1 != params_number:
        params += ' ,'

step = ${2}.lower()
for param in params_list:
    step = step.replace(param, '')
step = re.sub(r'\s+$', '', step)
step = re.sub(r'\s+', '_', step)

result = 'def ' + step + '(' + params + '):'
return result
>
	$0]]></text>
    <tag>sd</tag>
    <description>Step definition</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be(${1:expected})
$0]]></text>
    <tag>be</tag>
    <description>Should be</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be(${1:expected})
$0]]></text>
    <tag>notbe</tag>
    <description>Should not be</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| have(${1:items})
$0]]></text>
    <tag>have</tag>
    <description>Should have</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| have(${1:items})
$0]]></text>
    <tag>nothave</tag>
    <description>Should not have</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be_into(${1:collection})
$0]]></text>
    <tag>into</tag>
    <description>Should be into</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be_into(${1:collection})
$0]]></text>
    <tag>notinto</tag>
    <description>Should not be into</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be_equal_to(${1:expect})
$0]]></text>
    <tag>equal</tag>
    <description>Should be equal to</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be_equal_to(${1:expect})
$0]]></text>
    <tag>notequal</tag>
    <description>Should not be equal to</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| have_all_of(${1:iterable})
$0]]></text>
    <tag>allof</tag>
    <description>Should have all of</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| have_all_of(${1:iterable})
$0]]></text>
    <tag>notallof</tag>
    <description>Should not have all of</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| have_any_of(${1:iterable})
$0]]></text>
    <tag>anyof</tag>
    <description>Should have any of</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| have_any_of(${1:iterable})
$0]]></text>
    <tag>notanyof</tag>
    <description>Should not have any of</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be_ended_with(${1:substring})
$0]]></text>
    <tag>ended</tag>
    <description>Should be ended with</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be_ended_with(${1:substring})
$0]]></text>
    <tag>notended</tag>
    <description>Should not be ended with</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be_greater_than(${1:expected})
$0]]></text>
    <tag>greater</tag>
    <description>Should be greater than</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be_greater_than(${1:expected})
$0]]></text>
    <tag>notgreater</tag>
    <description>Should not be greater than</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be_greater_than_or_equal_to(${1:expected})
$0]]></text>
    <tag>greaterequal</tag>
    <description>Should be greater than or equal to</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be_greater_than_or_equal_to(${1:expected})
$0]]></text>
    <tag>notgreaterequal</tag>
    <description>Should not be greater than or equal to</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be_kind_of(${1:class})
$0]]></text>
    <tag>kind</tag>
    <description>Should be kind of</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be_kind_of(${1:class})
$0]]></text>
    <tag>notkind</tag>
    <description>Should not be kind of</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be_less_than(${1:expected})
$0]]></text>
    <tag>less</tag>
    <description>Should be less than</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be_less_than(${1:expected})
$0]]></text>
    <tag>notless</tag>
    <description>Should not be less than</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be_less_than_or_equal_to(${1:expected})
$0]]></text>
    <tag>lessequal</tag>
    <description>Should be less than or equal to</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be_less_than_or_equal_to(${1:expected})
$0]]></text>
    <tag>notlessequal</tag>
    <description>Should not be less than or equal to</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be_equal_to_ignoring_case(${1:expect})
$0]]></text>
    <tag>equalignoring</tag>
    <description>Should be equal to ignoring case</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be_equal_to_ignoring_case(${1:expect})
$0]]></text>
    <tag>notequalignoring</tag>
    <description>Should not be equal to ignoring case</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| have_in_any_order(${1:iterable})
$0]]></text>
    <tag>anyorder</tag>
    <description>Should have in any order</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| have_in_any_order(${1:iterable})
$0]]></text>
    <tag>notanyorder</tag>
    <description>Should not have in any order</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be_like(${1:regex})
$0]]></text>
    <tag>like</tag>
    <description>Should be like</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be_like(${1:regex})
$0]]></text>
    <tag>notlike</tag>
    <description>Should not be like</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| throw(${1:exception})
$0]]></text>
    <tag>throw</tag>
    <description>Should throw</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| throw(${1:exception})
$0]]></text>
    <tag>notthrow</tag>
    <description>Should not throw</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should| be_throw_by(${1:call})
$0]]></text>
    <tag>throwby</tag>
    <description>Should be throw by</description>
  </snippet>
  <snippet>
    <text><![CDATA[|should_not| be_throw_by(${1:call})
$0]]></text>
    <tag>notthrowby</tag>
    <description>Should not be throw by</description>
  </snippet>
</snippets>

